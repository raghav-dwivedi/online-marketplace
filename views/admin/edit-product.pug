extends ../layouts/main-layout.pug

block styles
    link(rel="stylesheet", href="/css/forms.css")
    link(rel="stylesheet", href="/css/product.css")

block content 
    main
        if (hasError)
            each error in validationErrors
                .user-message.user-message--error #{error.msg}
        if (editing)
            form.product-form(action = "/admin/edit-product", method="POST", enctype="multipart/form-data")
                .form-control
                    label(for="title") Title
                    input(
                        class=validationErrors.find(e => e.param === 'title') ? 'invalid' : '',
                        type="text",
                        name="title",
                        value= !hasError ? product.title : preservedInput.title
                        )#title
                //- .form-control
                //-     label(for="imageUrl") Image URL
                //-     input(
                //-         class=validationErrors.find(e => e.param === 'imageUrl') ? 'invalid' : '',
                //-         type="text",
                //-         name="imageUrl",
                //-         value= !hasError ? product.imageUrl : preservedInput.imageUrl
                //-         )#imageUrl
                .form-control
                    label(for="image") Image
                    input(
                        type="file",
                        name="image"
                        )#image
                .form-control
                    label(for="price") Price
                    input(
                        class=validationErrors.find(e => e.param === 'price') ? 'invalid' : '',
                        type="number", name="price" step="0.01",
                        value= !hasError ? product.price : preservedInput.price
                        )#price
                .form-control
                    label(for="description") Description
                    textarea(
                        class=validationErrors.find(e => e.param === 'description') ? 'invalid' : '',
                        name="description",
                        rows="5"
                        )#description #{!hasError ? product.description : preservedInput.description}
                    input(type="hidden", value=product._id, name="productId")
                    input(type="hidden",  name="_csrf", value=csrfToken)                
                    button.btn(type="submit") Update Product
        else
            form.product-form(action = "/admin/add-product", method="POST", enctype = "multipart/form-data")
                .form-control
                    label(for="title") Title
                    input(
                        class=validationErrors.find(e => e.param === 'title') ? 'invalid' : '',
                        type="text",
                        name="title", 
                        value=preservedInput.title
                        )#title
                //- .form-control
                //-     label(for="imageUrl") Image URL
                //-     input(
                //-         class=validationErrors.find(e => e.param === 'imageUrl') ? 'invalid' : '',
                //-         type="text",
                //-         name="imageUrl", 
                //-         value=preservedInput.imageUrl
                //-         )#imageUrl
                .form-control
                    label(for="image") Image
                    input(
                        type="file",
                        name="image"
                        )#image
                .form-control
                    label(for="price") Price
                    input(
                        class=validationErrors.find(e => e.param === 'price') ? 'invalid' : '',
                        type="number",
                        name="price",
                        step="0.01", 
                        value=preservedInput.price
                        )#price
                .form-control
                    label(for="description") Description
                    textarea(
                        class=validationErrors.find(e => e.param === 'description') ? 'invalid' : '',
                        name="description",
                        rows="5"
                        )#description #{preservedInput.description}
                    input(type="hidden",  name="_csrf", value=csrfToken)
                    button.btn(type="submit") Add Product